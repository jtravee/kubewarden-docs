"use strict";(self.webpackChunkkubewarden_docusaurus=self.webpackChunkkubewarden_docusaurus||[]).push([[9113],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return d}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(t),d=o,y=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return t?n.createElement(y,i(i({ref:r},u),{},{components:t})):n.createElement(y,i({ref:r},u))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},683:function(e,r,t){t.r(r),t.d(r,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var n=t(3117),o=t(102),a=(t(7294),t(3905)),i=["components"],s={sidebar_label:"Using private registry",title:""},c="Configuring Policy Servers to use private registry",l={unversionedId:"operator-manual/policy-servers/private-registry",id:"operator-manual/policy-servers/private-registry",title:"",description:"It is not uncommon that enterprises using cloud native environments have their",source:"@site/docs/operator-manual/policy-servers/02-private-registry.md",sourceDirName:"operator-manual/policy-servers",slug:"/operator-manual/policy-servers/private-registry",permalink:"/operator-manual/policy-servers/private-registry",draft:!1,editUrl:"https://github.com/kubewarden/docs/edit/main/docs/operator-manual/policy-servers/02-private-registry.md",tags:[],version:"current",lastUpdatedAt:1659812798,formattedLastUpdatedAt:"Aug 6, 2022",sidebarPosition:2,frontMatter:{sidebar_label:"Using private registry",title:""},sidebar:"docs",previous:{title:"Configuring PolicyServers using Custom CAs",permalink:"/operator-manual/policy-servers/custom-cas"},next:{title:"Telemetry Quickstart",permalink:"/operator-manual/telemetry/quickstart"}},u={},p=[],m={toc:p};function d(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configuring-policy-servers-to-use-private-registry"},"Configuring Policy Servers to use private registry"),(0,a.kt)("p",null,"It is not uncommon that enterprises using cloud native environments have their\nown container registries to store their container images and other artefacts\nused to run their applications. As these artifacts are, most of the time, private,\nit does not make sense to let them be publicly available on the web or even to\nother teams within the same organization. In these scenarios, it is common to\nuse private registries that require authentication to access the resources stored\nIn them. With this in mind, we have made it possible to specify and configure the credentials\nused to authenticate into a private registry where your policies are stored and\nallowing Kubewarden Policy Server to download policies from public and private\nregistries."),(0,a.kt)("p",null,"Before configuring your Policy Server instance, you need to store the credentials\nused to access the registry in a ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-registry")," secret. The secret should be\ncreated in the same namespace where you run your Policy Server. This can be done\nwith the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl --namespace kubewarden create secret docker-registry secret-ghcr-docker \\\n  --docker-username=myuser \\\n  --docker-password=mypass123 \\\n  --docker-server=myregistry.io\n")),(0,a.kt)("p",null,"If you want more information about how to create the secret. Please, go to the\n",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/configuration/secret/#docker-config-secrets"},"Kubernetes documentation"),"."),(0,a.kt)("p",null,"Once you have the secret created, it is necessary to configure the Policy Server\ninstance by setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"imagePullSecret")," field with the name of the secret created with the\ncredentials:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Example of a policy server using private registry\napiVersion: policies.kubewarden.io/v1\nkind: PolicyServer\nmetadata:\n  name: default\nspec:\n  image: ghcr.io/kubewarden/policy-server:v1.1.1\n  serviceAccountName: policy-server\n  replicas: 1\n  annotations:\n  imagePullSecret: "secret-ghcr-docker"\n')),(0,a.kt)("p",null,"When deployed from the ",(0,a.kt)("inlineCode",{parentName:"p"},"kubewarden-defaults")," Helm chart you can configure the\n",(0,a.kt)("inlineCode",{parentName:"p"},"policyServer.imagePullSecret")," field in the values file with the secret name. Thus,\nthe policy server created will be able to download policies from your private\nregistry as well:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# values file example\npolicyServer:\n  telemetry:\n    enabled: False\n  imagePullSecret: secret-ghcr-docker\n")))}d.isMDXComponent=!0}}]);